#include<stdio.h>
#include<stdlib.h>
#include "Queue.h"
struct Node *root=NULL;
void tree_create()
{
    struct Node *p,*t;
    int x;
    struct Queue q;  //q is the variable to store the data in Queue structure
    create(&q,100);  //the create function in queue.c will be invoked from here

    printf("Enter Root value:");
    scanf("%d",&x);  // The value to be stored in "root" node of the tree
    root=(struct Node *)malloc(sizeof(struct Node));
    root->data=x;   // The value is stored in Tree's Node data field
    root->lchild=root->rchild=NULL;
    //The root value is the address of the Node created for Tree Structure
    enqueue(&q,root);  //the enqueue function of Queue.c

    while(!isEmpty(&q))
    {
        p=dequeue(&q);
        printf("Enter Left Child of %d:",p->data);
        scanf("%d",&x);
        if(x!=-1)
        {
            t=(struct Node*)malloc(sizeof(struct Node));
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->lchild=t;
            enqueue(&q,t);
        }
        printf("Enter Right Child of %d:",p->data);
        scanf("%d",&x);
        if(x!=-1)
        {
            t=(struct Node*)malloc(sizeof(struct Node));
            t->data=x;
            t->lchild=t->rchild=NULL;
            p->rchild=t;
            enqueue(&q,t);
        }
    }
}

void preorder(struct Node *p)
{
    if(p)
    {
        printf("%d ",p->data);
        preorder(p->lchild);
        preorder(p->rchild);
    }
}
void Inorder(struct Node *p)
{
    if(p)
    {
        Inorder(p->lchild);
        printf("%d ",p->data);
        Inorder(p->rchild);
    }
}
void Postorder(struct Node *p)
{
    if(p)
    {
        Inorder(p->lchild);
        Inorder(p->rchild);
        printf("%d ",p->data);
    }
}
int main()
{
    tree_create();
    printf("\nThe PreOrder is: ");
    preorder(root);
    printf("\nThe InOrder is: ");
    Inorder(root);
    printf("\nThe PostOrder is: ");
    Postorder(root);
}
